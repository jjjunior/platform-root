name: Deploy to AWS CodeArtifact

on:
  push:
    branches: [ "master" ]
  # workflow_dispatch: {}

permissions:
  id-token: write
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java 25 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '25'

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: (Diag) Who am I?
        run: aws sts get-caller-identity

      # Obtem token e escreve settings.xml (sem usar `aws codeartifact login`)
      - name: Get CodeArtifact token
        id: ca
        run: |
          TOKEN=$(aws codeartifact get-authorization-token \
            --domain luministack \
            --domain-owner 148206343556 \
            --query authorizationToken --output text)
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Configure Maven settings.xml for CodeArtifact (server id = codeartifact)
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<'XML'
          <settings>
            <servers>
              <server>
                <id>luministack-repository</id>
                <username>aws</username>
                <password>${env.CODEARTIFACT_AUTH_TOKEN}</password>
              </server>
            </servers>
          </settings>
          XML
          echo "CODEARTIFACT_AUTH_TOKEN=${{ steps.ca.outputs.token }}" >> $GITHUB_ENV

      - name: Increment patch version (robusto, suporta ${revision})
        id: bump
        shell: bash
        run: |
          set -euo pipefail

          # --- Helpers ---
          get_version () {
            local expr="$1"
            mvn -q --non-recursive -DforceStdout help:evaluate -Dexpression="$expr" 2>/dev/null \
              | grep -E '^[0-9]+(\.[0-9]+){1,2}(-SNAPSHOT|-RC[0-9]+)?$' || true
          }

          RAW_VERSION="$(get_version project.version)"
          if [[ -z "${RAW_VERSION}" || "${RAW_VERSION}" == *'${'* ]]; then
            RAW_VERSION="$(get_version revision)"
          fi
          if [[ -z "${RAW_VERSION}" || "${RAW_VERSION}" == *'${'* ]]; then
            RAW_VERSION="$(get_version project.parent.version)"
          fi
          if [[ -z "${RAW_VERSION}" ]]; then
            echo "Não consegui resolver a versão do projeto (project.version/revision)."
            echo "Dica: se usa CI-Friendly (<version>\${revision}</version>), garanta que a property <revision> exista no pom."
            exit 2
          fi

          echo "RAW_VERSION=$RAW_VERSION"

          # remove sufixos (-SNAPSHOT, -RCx) só para matem.
          BASE_VERSION="$(echo "$RAW_VERSION" | sed 's/-.*$//')"
          # normaliza X.Y -> X.Y.0
          if [[ "$BASE_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"; MINOR="${BASH_REMATCH[2]}"; PATCH="${BASH_REMATCH[3]}"
          elif [[ "$BASE_VERSION" =~ ^([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"; MINOR="${BASH_REMATCH[2]}"; PATCH="0"
          else
            echo "Formato inesperado de versão: $RAW_VERSION"
            exit 3
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
          echo "NEW_VERSION=$NEW_VERSION"

          # Detecta se o projeto usa <version>${revision}</version>
          VERSION_DECL="$(xmllint --xpath '/*[local-name()="project"]/*[local-name()="version"]/text()' pom.xml 2>/dev/null || true)"
          if [[ "$VERSION_DECL" == '${revision}' ]]; then
            # CI-Friendly: atualiza a property "revision"
            mvn -B versions:set-property \
              -Dproperty=revision \
              -DnewVersion="$NEW_VERSION" \
              -DgenerateBackupPoms=false \
              -DprocessAllModules=true
          else
            # padrão: atualiza <version> de todos módulos
            mvn -B versions:set \
              -DnewVersion="$NEW_VERSION" \
              -DgenerateBackupPoms=false \
              -DprocessAllModules=true
          fi

          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "Bumped: $RAW_VERSION -> $NEW_VERSION"

      - name: Commit new version (pom.xml) to master
        shell: bash
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "ci: bump version to ${{ steps.bump.outputs.new_version }}" || echo "No changes to commit"
          git push origin master || echo "Nothing to push"

      - name: Build (clean + install)
        run: mvn -B clean install -DskipTests

      # Com distributionManagement configurado, basta `mvn deploy`
      - name: Deploy to CodeArtifact
        run: mvn -B -U -DskipTests deploy